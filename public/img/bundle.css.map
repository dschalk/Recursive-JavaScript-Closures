{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../Blog.svelte",
    "../Monad2.svelte",
    "../Monad3.svelte",
    "../Haskell.svelte",
    "../Monad.svelte",
    "../Transducer.svelte",
    "../ToggleClass.svelte",
    "../Cargo.svelte",
    "../Select.svelte",
    "../List.svelte",
    "../Item.svelte",
    "../MultiSelection.svelte",
    "../Selection.svelte",
    "../VirtualList.svelte"
  ],
  "sourcesContent": [
    "<script>\n\nexport let j = 0;\n\nimport Cow from './Cow.svelte'\nimport Monad from './Monad.svelte'\nimport Monad2 from './Monad2.svelte'\nimport Monad3 from './Monad3.svelte'\nimport Haskell from './Haskell.svelte'\nimport Bugs from './Bugs.svelte'\nimport Matrix from './Matrix.svelte'\nimport Transducer from './Transducer.svelte'\nimport ToggleClass from './ToggleClass.svelte'\nimport ToggleTheme from './ToggleTheme.svelte'\nimport Home from './Home.svelte'\nimport Score from './Score.svelte'\nimport Stor from './Stor.svelte'\nimport Snack from './Snack.svelte'\nimport Cargo from './Cargo.svelte'\n\nfunction id (v) {return v}\n\n</script>\n\n<style>\nbody {\nfont: \"Times New Roman\";\n}\n\n.dropbtn {\nbackground-color: #361B01;\ncolor: orange;\nfont-size: 28px;\nborder: none;\n}\n\n.dropdown {\n  position: fixed;\n  top: 200px;\n  left: 10%;\n  width: 16%;\ndisplay: inline-block;\nbackground-color: #361B01;\n}\n\n.dropdown-content {\nfont-size: 23px;    \ndisplay: none;\nposition: absolute;\ncolor: sky-blue;    \nz-index: 1;\nbackground-color: #361B01;\n}\n.dropdown-content a {\ncolor: yellow;\npadding: 12px 16px;\ntext-decoration: none;\ndisplay: block;\nbackground-color: #361B01;\n}\n\n.dropdown-content a:hover {color: gold; background-color: #361B01;}\n\n.dropdown:hover .dropdown-content {display: block; background-color: #361B01;}\n\n.dropbtn {color: gold; background-color: #361B01;}\n\n.menu {}\n.menu:hover {color: orange}\n</style>\n\n\n\n<br>\n<!-- <div style = \"display: flex\">\n<div style = \"width 20%; margin-right: 2%\"> -->\n\n<div class=\"dropdown\">\n  <div class=\"dropbtn\">Table of Contents</div>\n  <div class=\"dropdown-content\">\n<div class = menu on:click = {() => j = 0}> Home</div>\n<div class = menu on:click = {() => j = 1}> A Simple Monad</div>\n<div class = menu on:click = {() => j = 2}> A Messaging Monad</div>\n<div class = menu on:click = {() => j = 3}> A Promises Monad</div>\n<div class = menu on:click = {() => j = 4}> A Transducer Monad</div>\n<div class = menu on:click = {() => j = 5}> Why Svelte</div>\n<div class = menu on:click = {() => j = 6}> Haskell Secrets</div>\n<div class = menu on:click = {() => j = 7}> React Game of Score</div>\n<div class = menu on:click = {() => j = 8}> Functional Cargo Cult</div>\n<div class = menu on:click = {() => j = 9}> Eradicating Bed Bugs</div>\n<div class = menu on:click = {() => j = 10}> Toggle Class</div>\n<div class = menu on:click = {() => j = 11}> Toggle Theme</div>\n  </div>\n</div>\n\n\n<!--  \n<div on:click = {() => j = 1}> A Simple Monad</div>\n<div on:click = {() => j = 2}> A Messaging Monad</div>\n<div on:click = {() => j = 3}> A Promises Monad OUOIU OIUIUIO HJHKHKI DSDFDFH 234 HJHKHKI</div>\n  </div>\n<div style = \"width: 70%; margin-right: 2%\"> -->\n<!-- <div on:click = {() => j = 3}> A Promises Monad</div>\n<div>\n</div>\n\n        <ul >\n            <div>VARIATIONS ON THE MONAD THEME</div>\n            <li class='button' on:click={() => {j = 1; console.log(\"j is\", j)}}>A Simple Monad</li>>\n            <li class='button' on:click={() => {j = 2; console.log(\"j is\", j)}}>Message Monad</li>\n            <li class='button' on:click={() => {j = 3; console.log(\"j is\", j)}}>Promise Monad</li>\n            <li class='button' on:click={() => {j = 7; console.log(\"j is\", j)}}>Transducer Simulator</li>\n            <li class='button' on:click={() => {j = 10; console.log(\"j is\", j)}}>React Interactive Game of Score</li>\n        </ul>\n        \n        <ul>\n\n        <li><div>MISCELLANEOUS TOPICS</div></li>\n        <li class='button'  on:click={() => j = 5}> Why Svelte</li>\n        <li class='button' on:click={() => {j = 9; console.log(\"j is\", j)}}>Hidden Haskell Informationx</li>\n        <li class='button' on:click={() => {j = 4; console.log(\"j is\", j)}}>Bed Bugs</li>\n        <li class='button' on:click={() => {j = 0; console.log(\"j is\", j)}}>Home</li>\n        <li class='button' on:click={() => {j = 23; console.log(\"j is\", j)}}>StoreDemo</li>\n        </ul>\n        <ul>\n        <li><div>SVELTE SNIPPETS</div></li>\n        <li class='button' on:click={() => {j = 8; console.log(\"j is\", j)}}>Toggle Theme</li>\n        <li class='button' on:click={() => {j = 11; console.log(\"j is\", j)}}>Toggle Class</li>\n        <li class='button' on:click={stor}>Stor</li>\n        <li class='button' on:click={snack}>Snack</li>\n        <li class='button' on:click={cargo}>Cargo</li>\n            <li class='button' on:click={() => {j = 40; console.log(\"j is\", j)}}>Drop1</li>\n            <li class='button' on:click={() => {j = 41; console.log(\"j is\", j)}}>Drop2</li>\n            <li class='button' on:click={() => {j = 42; console.log(\"j is\", j)}}>Drop3</li>\n            <li class='button' on:click={() => {j = 43; console.log(\"j is\", j)}}>Drop4</li>\n            <li class='button' on:click={() => {j = 44; console.log(\"j is\", j)}}>Drop5</li>\n            \n            \n        <br>\n        </ul>\n        </div>  -->                                                         \n        <div class = margins>\n\n<div style = \"margin-left: 25%; margin-right: 25%;\">\n\n<div style = \"font-size: 40px; color: #FFD700; text-align: center\">DAVID SCHALK's BLOG</div>\n<div style = \"font-size: 24px; color: #FFCCAA; font-style: italic; text-align: center\">Escape from a Cargo Cult and Other Adventures </div>\n<br><br><br> \n\n{#if j === 0}\n<Home />\n{/if}\n{#if j === 1}\n<Monad />\n{/if}\n{#if j === 2}\n<Monad2 />\n{/if}\n{#if j === 3}\n<Monad3 />\n{/if}\n{#if j === 4}\n<Transducer />\n{/if}\n{#if j === 5}\n<Matrix />\n{/if}\n{#if j === 6}\n<Haskell />\n{/if}\n{#if j === 7}\n<Score />\n{/if}\n{#if j === 8}\n<Cargo />\n{/if}\n{#if j === 9}\n<Bugs />\n{/if}\n{#if j === 10}\n<ToggleClass />\n{/if}\n{#if j === 11}\n<ToggleTheme />\n{/if}\n{#if j === 12}\n<Cow />\n{/if}\n{#if j === 13}\n<Stor />\n{/if}\n</div>\n<br><br>\n<slot />\n</div>\n<pre>\n\n\n\n...\n</pre>\n\n\n\n",
    "\n<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\nfunction wait(ms) {\nreturn new Promise(r => setTimeout(r, ms));\n}\n\nlet j = 2;\n$: j;\n\nasync function pause (x) {\nawait wait(1000)\nreturn x;\n}\n\nvar pauseP = t => async x => {\nawait wait(t*1000)\nreturn x;\n}\n\nasync function pauseM (x) {\nawait wait(600)\nreturn Monad(x);\n}\n\nasync function pauseX (x) {\nawait wait(x);\n}\n\nasync function squareP (x) {\nawait wait(1200)\nreturn x*x;\n}\n\nvar divPinverse = a => async b => {\nawait wait (600)\nreturn a/b;\n}\n\nvar divP = a => async b => {\nawait wait (600)\nreturn b/a;\n}\n\nvar doubleP = async a => {\nawait wait (1000)\nreturn a+a;\n}\n\nvar toInt = a => parseInt(a, 10);\n\nvar addP_toInt = x => async y => {\nawait wait(1000)\nreturn toInt(x) + toInt(y);\n}\n\nvar addP = x => async y => {\nawait wait(1000)\nreturn x + y;\n}\n\nvar multP = x => async y => {\nawait wait(1200)\nreturn x * y;\n}\n\nvar powP = x => async y => {\nawait wait(1200)\nreturn y**x;\n}\n\nasync function cubeP (x) {\nawait wait(1200)\nreturn x*x*x;\n}\n\nasync function idP (x) {\nawait wait(1200)\nreturn x;\n}\nasync function sqrtP (x) {\nawait wait(1200)\nreturn x**(1/2)\n}\n\nfunction intArray (n) {\nreturn [...Array(n).keys()];\n}\n\nvar cube = x => x**3;\nvar pow = p => x => x**p;\nvar square = x => x*x;\nvar add = x => y => x+y;\nvar sqrt = x => x**(1/2);\nvar root = r => x => x(1/r);\nvar div = d => x => x/d;\n\nvar f = function f () {};\nvar f_ = function f_ () {};\nvar sto = \"sto\";\nvar halt = \"halt\";\n\nvar O = new Object();\nO.d0 = [2,3,4];\nO.d1 = [2,3,4];\nO.d2= [2,3,4];\n\nvar M = -1;\nvar Q = -1\n\nvar lock = false;\n\nO.generic = [\"Nobody\"];\n\nconst Monad = function Monad ( AR = [], name = \"generic\", f_ = mFunc  )  {\nlet ar = AR.slice();\nO[name] = ar;\nlet run;\nlet x = O[name].pop();\nreturn run = (function run (x) {\nif (x != undefined && x === x  && x !== false\n  && x.name !== \"f_\" && x.name !== \"halt\" ) {\n    O[name] = O[name].concat(x)\n  };\n  return f_;\n})(x);\n}\n\nvar mFunc = function mFunc_ (func) {\n    if (func === 'halt' || func === 'S') return O[name];\n    else if (typeof func !== \"function\") p = func(x);\n    else if (x instanceof Promise) p = x.then(v => func(v));\n    return run(p);\n  };\n\n/* let a0 = *Monad([3])(cube)\n(add(3))(square)(div(100))\n(sqrt)(()=>this)(halt); */\n\n// var socket = new WebSocket(\"ws://localhost:3055\")\nvar socket = new WebSocket(\"ws://167.71.168.53:3055\")\n\nsocket.onclose = function (event) {\nconsole.log('<><><> ALERT - socket is closing. <><><> ', event);\n};\n\nsocket.onmessage = function(e) {\n// console.log(\"WebSocket message is\", e);\nvar v = e.data.split(',');\nif (v[0] === \"BE#$42\") {\n  Q = Q + 1;\n  Monad([v[3]], \"c\"+Q);\n  if (Q === 2) Q = -1;\n  worker_OO.postMessage([v[3]])\n}\n}\n\nlogin();\n\nfunction login() {\nconsole.log('00000000000000000000000000000000 Entering login', socket.readyState);\nsetTimeout(function () {\n  if (socket.readyState === 1) {\n    console.log('readyState is', socket.readyState);\n    var v = Math.random().toString().substring(5);\n    var v2 = v.toString().substring(2);\n    var combo = v + '<o>' + v2;\n    socket.send('CC#$42' + combo);\n    // socket.send(`GZ#$42,solo,${v}`);\n    socket.send(\"BE#$42,solo,name,10000\")\n    socket.send(\"BE#$42,solo,name,100000\")\n    socket.send(\"BE#$42,solo,name,1000\")\n  } else {\n    login();\n  }\n}, 200)\n}\n\nfunction isEmpty(obj) {\n  for(var key in obj) {\n      if(obj.hasOwnProperty(key))\n          return false;\n  }\n  return true;\n};\n\nfunction countKeys(ob, s) {\nvar N = 0\nfor(var key in ob) if (key.startsWith(s)) N+=1;\nreturn N;\n}\n\nvar groupDelete = function groupDelete (ob, x) {\nfor (var z in ob) if (z.startsWith(\"x\")) delete ob[z]\n}\n\nvar clearOb = function clearOb (ob) {\nfor (var x in ob) delete ob[x]\n}\n\nconst factors = function factors () {\nsocket.send(\"BE#$42,solo,name,10000\")\nsocket.send(\"BE#$42,solo,name,100000\")\nsocket.send(\"BE#$42,solo,name,1000\")\n}\n\nvar worker_OO = new Worker('worker_OO.js');\n\nworker_OO.onmessage = e => {\n  M = M + 1;\n  Monad([e.data], \"d\"+M);\n  if (M === 2) {\n    M = -1;\n  }\n}\n\nvar mon = `const Monad = function Monad ( AR = [], name = \"generic\" )  {\nvar f_, p, run;\nvar ar = AR.slice();\nvar name = name;\nO[name] = ar;\nlet x = O[name].pop();\nreturn run = (function run (x) {\nif (x != undefined && x === x  && x !== false\n  && x.name !== \"f_\" && x.name !== \"halt\" ) {\n    O[name] = O[name].concat(x)\n  };\n  function f_ (func) {\n    if (func === 'halt' || func === 'S') return O[name];\n    else if (typeof func !== \"function\") p = func;\n    else if (x instanceof Promise) p = x.then(v => func(v));\n    else p = func(x);\n    return run(p);\n  };\n  return f_;\n})(x);\n} `\n\nvar statement = `    Monad([\"value\"], \"key\")(x => \"This is the \" + x)(x => x + \".\")(halt)\nO.key   // [\"value\", \"This is the value\", \"This is the value.\"]`\n\nvar fa = `    function factors () {\nif (lock === false && j === 2) {\n  lock = true;\n  clearOb(O);\n  N = -1;\n  M = -1;\n  Q = -1;\n  groupDelete(O, \"c\");\n  groupDelete(O, \"d\");\n  fact();\n}\nelse if (j !== 2) {return}\nelse {\n  setTimeout(()=> {\n  factors()\n},1000)\n}\n}`\n\nvar onmessServer = `ar v = e.data.split(',');\nif (v[0] === \"BE#$42\") {\nQ = Q + 1;\nMonad([v[3]], \"c\"+Q);\nworker_OO.postMessage([v[3]])\n}\n}  `\n\nvar onmessWorker = `worker_OO.onmessage = e => {\n  M = M + 1;\n  Monad([e.data], \"d\"+M);\n  if (M === 2) {\n    M = -1;\n  }\n}`\n\nlet candle = ` socket.send(\\\"BE#$42,solo,name,10000\\\")    \nsocket.send('\\BE#$42,solo,name,100000\\\")    \nsocket.send(\\\"BE#$42,solo,name,1000\\\")    `    \n\n</script>\n\n<style>\nbutton {\nmargin-left: 5%;\nbackground-color: #004400;\nborder-width: 2px;\nborder-color: #E8F7C1;\nborder-radius: 70px;\ntext-decoration-color: red;\nfont-size: 20px;\n-webkit-box-shadow: 0px 0px 15px 0px rgb(255, 215, 0);\nbox-shadow:         0px 0px 15px 0px rgb(255, 215, 0);\npadding: 3px 10px 3px 10px;\n}\n\nbutton:hover {\nbackground-color: #0000CC;\npadding: 3px 10px 3px 10px;\ntext-decoration-color: yellow;\nborder-color: #0000AA;\n}\n\n</style>\n\n{#if j === 2} \n <div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 38px;\" transition:fade>\nASYNCHRONOUSLY CREATED STATE\n</div>\n{/if}\n\n<br>\n<p> Clicking the button below sends three requests to the Haskell WebSockets server asking for quasi-random integers. As the numbers come in from the server, they are placed in the object named \"O\" with keys prefixed by \"c\", and then forwarded to a web worker. The worker returns arrays containing the prime factors of the numbers it recieves. These are placed in \"O\" with keys prefixed by \"d\".</p> \n <br>\n\n\n\n\n\n<div style = \"color: #BBBBFF; font-size: 20px;\"> The WebSockets server sent these numbers (now at O.c0, O.c1, and O.c2): </div>\n<div style = \"color: #FFFFCD; font-size: 20px; \">\n{O.c0}, {O.c1}, and {O.c2}  \n</div>\n<br>\n<span style = \"color: #CDCDFF; font-size: 20px;\"> The web worker sent these arrays of prime factors (now at O.d0, O.d1, and O.d2): </span>\n<span style = \"color: #FFFFCD; font-size: 20px;\">\n[{O.d0.join(', ')}], [{O.d1.join(', ')}], and [{O.d2.join(', ')}]</span>\n<br>\n<br>\n<button on:click = {factors}>\n<pre>{candle}</pre>\n\n</button>\n<br><br><br>\n\n\n\n<div style = \"color: #FFFFCD; font-size: 20px;\">\n[{O.d0}].reduce((a,b) => a*b) == {O.c0}: <span style = \"font-size:24px; color:#FF0B0B\" >{O.d0.reduce((a,b) => a*b) == O.c0}</span>\n<br>\n[{O.d1}].reduce((a,b) => a*b) == {O.c1}: <span style = \"font-size:24px; color:#FF0B0B\" >{O.d1.reduce((a,b) => a*b) == O.c1}</span>\n<br>\n[{O.d2}].reduce((a,b) => a*b) == {O.c2}: <span style = \"font-size:24px; color:#FF0B0B\" >{O.d2.reduce((a,b) => a*b) == O.c2}</span>\n<br>\n\n\n</div>\n\n<p> In this demonstration, each monad's array of computed values is preserved as an attribute of an object named O. Here's the definition of \"Monad\" used in this module:</p>\n\n<pre>{mon}</pre>\n\n<p> Messages are sent to the Haskell WebSockets server requesting pseudo-random numbers between 1 and the integer specified at the end of the request. On the server, randomR from the System.Random library produces a number which is sent to the browser with prefix \"BE#$42\". Messages from the server are parsed in socket.onmessage. If the prefix is \"BE#$42\", the payload (a number) is sent to worker_OO, which sends back the number's prime decomposition.\n<pre>{onmessServer}</pre>\n<p> Messages from the web worker are processed in worker_OO.onmessage\n<pre>{onmessWorker}</pre>\n<p> When M === 2 the process is complete. M and N are set to -1 and lock is set to false, allowing another possible call to random() to call rand(). </p>\n<br>\n<span> The code for this Svelte application is at </span>\n<a href = \"https://github.com/dschalk/blog/\" target = \"_blank\">GitHub repository</a>\n",
    "\n  <script>\n      import {fade} from \"svelte/transition\"\n      let visible = true;\n\n      let j = 3;\n      $: j;\n\n\n    function wait(ms) {\n      return new Promise(r => setTimeout(r, ms));\n    }\n\n      async function pause (x) {\n        await wait(1000)\n        return x;\n      }\n\n      var pauseP = t => async x => {\n        await wait(t*1000)\n        return x;\n      }\n\n      async function pauseM (x) {\n        await wait(600)\n        return ret(x);\n      }\n\n      async function pauseX (x) {\n        await wait(x);\n      }\n\n      async function squareP (x) {\n        await wait(100)\n        return x*x;\n      }\n\n      var divPinverse = a => async b => {\n        await wait (300)\n        return a/b;\n      }\n\n      var divP = a => async b => {\n        await wait (300)\n        return b/a;\n      }\n\n      var doubleP = async a => {\n        await wait (300)\n        return a+a;\n      }\n\n      var toInt = a => pareseInt(a, 10);\n\n      var addP_toInt = x => async y => {\n        await wait(300)\n        return toInt(x) + toInt(y);\n      }\n\n      var addP = x => async y => {\n        await wait(900)\n        return x + y;\n      }\n\n      var multP = x => async y => {\n        await wait(300)\n        return x * y;\n      }\n\n      var powP = x => async y => {\n        await wait(300)\n        return y**x;\n      }\n\n      async function cubeP (x) {\n        await wait(300)\n        return x*x*x;\n      }\n\n      async function idP (x) {\n        await wait(300)\n        return x;\n      }\n      async function sqrtP (x) {\n        await wait(900)\n        return x**(1/2)\n      }\n\n      var _conveNt_ = a => b => parseFloat(b,a);\n      var toFloat = _conveNt_ (10);\n\n      var cube = x => x**3;\n      var pow = p => x => x**p;\n      var square = x => x*x;\n      var add = x => y => x+y;\n      var sqrt = x => x**(1/2);\n      var root = r => x => x(1/r);\n      var div = d => x => x/d;\n\n    var f = function f () {};\n    var f_ = function f_ () {};\n    var sto = \"sto\";\n    var halt = \"halt\";\n\n    var O = new Object();\n    $: O;\n\n    var M = -1;\n    $: M;\n    var N = -1;\n    $: N;\n    var T = -1;\n    $: T;\n    var Q = -1\n    $: Q;\n\n    var lock = false;\n    $: lock\n\n    var Monad = function Monad ( AR = [], name = \"generic\" )  {\n      let p, run, f_;\n      let  ar = AR.slice();\n      O[name] = ar;\n      let x = O[name].pop();\n      return run = (function run (x) {\n        if (x instanceof Promise) x.then(y => {\n          if (typeof y != \"undefined\" && y == y && y.name !== \"f_\") {\n          O[name] = O[name].concat(y)\n          }\n        })\n        if (!(x instanceof Promise)) {\n            if (x != undefined && x == x) {\n              O[name] = O[name].concat(x)\n            }\n        }\n        f_ = function f_ (func) {\n          if (func === 'halt' || func === 'S') return O[name].slice();\n          else if (typeof func !== \"function\") p = func;\n          else if (x instanceof Promise) p = x.then(v => func(v));\n          else p = func(x);\n          return run(p);\n        };\n        return f_;\n      })(x);\n    }\n\n    var branch = function branch (s,s2) {return Monad(O[s].slice()  , s2)}\n    var resume = function resume (s) {return Monad(O[s], s)}\n\n    Monad([2], \"test\")(addP(1))(cubeP)(addP(3))(squareP)(divP(100))\n    (() => branch(\"test\", \"test_2\")(sqrtP)(cubeP)(()=>addP(O.test_2[2])\n    (O.test_2[1]))(squareP)(divP(100))(sqrtP)(multP(14))\n    (() => resume(\"test\")(multP(4))(addP(6))))\n\n\n  var mon = `   var Monad = function Monad ( AR = [], name = \"generic\"  )  {\n      var f_, p, run;\n      var ar = AR.slice();\n      var name = name;\n      O[name] = ar;\n      let x = O[name].pop();\n      return run = (function run (x) {\n        if (x instanceof Promise) x.then(y => {\n          if (y != undefined && y == y && y.name !== \"f_\") {\n          O[name] = O[name].concat(y)\n          }\n        })\n        if (!(x instanceof Promise)) {\n            if (x != undefined && x == x) {\n              O[name] = O[name].concat(x)\n            }\n        }\n        function f_ (func) {\n          if (func === 'halt' || func === 'S') return O[name].slice();\n          else if (typeof func !== \"function\") p = func;\n          else if (x instanceof Promise) p = x.then(v => func(v));\n          else p = func(x);\n          return run(p);\n        };\n        return f_;\n      })(x);\n    }`\n\n    var lok = false;\n\n    var start = function start () {\n      if (!lok) {\n        lok = true;\n        setTimeout(() => lok = false,3000 );\n        O = {};\n        Monad([2], \"test\")(addP(1))(cubeP)(addP(3))(squareP)(divP(100))\n        (() => branch(\"test\", \"test_2\")(sqrtP)(cubeP)(()=>addP(O.test_2[2])\n        (O.test_2[1]))(squareP)(divP(100))(sqrtP)(multP(14))\n        (() => resume(\"test\")(multP(4))(addP(6)))) }\n      else {\n        setTimeout(() => start(),300);\n      }\n    }\n\n  var fs = `   var branch = function branch (s,s2) {return Monad(O[s].slice(-1)  , s2)}\n    var resume = function resume (s) {return Monad(O[s], s)}`\n  var code = `    Monad([2], \"test\")(addP(1))(cubeP)(addP(3))(squareP)(divP(100))\n      (() => branch(\"test\", \"test_2\")(sqrtP)(cubeP)(()=>addP(O.test_2[2])\n      (O.test_2[1]))(squareP)(divP(100))(sqrtP)(multP(14))\n      (() => resume(\"test\")(multP(4))(addP(6))))`\n  </script>\n\n  <style>\n\nbutton {\nmargin-left: 5%;\nbackground-color: #004400;\nborder-width: 2px;\nborder-color: #E8F7C1;\nborder-radius: 70px;\ntext-decoration-color: red;\nfont-size: 20px;\n-webkit-box-shadow: 0px 0px 15px 0px rgb(255, 215, 0);\nbox-shadow:         0px 0px 15px 0px rgb(255, 215, 0);\npadding: 3px 10px 3px 10px;\n}\n\nbutton:hover {\nbackground-color: #0000CC;\npadding: 3px 10px 3px 10px;\ntext-decoration-color: yellow;\nborder-color: #0000AA;\n}\n    pre:hover {\n      color: gold;\n    }\n\n    .caption {\n      font: times;  \n      text-align: center; \n      color: hsl(210, 90%, 90%); \n      font-size: 32px;\n    }\n\n    .sub_caption {\n      font: times;  \n      text-align: center; \n      color: hsl(210, 90%, 90%); \n      font-size: 32px;\n    }\n  </style>\n\n  {#if j === 3}\n <div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); \" transition:fade>\n<div style = \"font-size: 26px;\"> A MONAD FOR PROMISE MANIPULATION</div>\n<div style = \"font-size: 22px;\">Computations Easily Resumed and Branched</div>  \n</div>\n{/if}\n\n  <h2>O.test is {O.test}</h2>\n  <h2>O.test_2 is {O.test_2}</h2>             <br>\n  <span class=tao> To see branch() and resume() in action, click the verbose butt6n (below). To see the boolean \"lok\" protecting the integrity of the data, click the verbose button (below) several times in rapid succession:</span>\n  <br><br>\n\n  <button style = \"text-align: left\" on:click = {start}><pre>Monad([2], \"test\")(addP(1))\n(cubeP)(addP(3))(squareP)(divP(100))(() => \nbranch(\"test\", \"test_2\")(sqrtP)(cubeP)(addP(O.test_2[2])\n(O.test_2[1]))(squareP)(divP(100))(sqrtP)(multP(14))(() =>\nresume(\"test\")(multP(4))(addP(6))))</pre></button>\n<p>  </p>\n  <br>\n  <p> Here's the modified monad constructor: </p>\n  <pre>{mon}</pre>\n  <p> After monads encounter \"halt\", they can use the function resume() to continue processing data where they left off and (2) they can branch off in new monads created by branch(). Here are the definitions:</p>\n  <pre>{fs}</pre>\n  <p> This is the statement that produces the observed results when \"START\" is clicked. </p>\n  <pre>{code}</pre>                           <br>\n  <button style = \"text-align: left\" on:click = {start}><pre>Monad([2], \"test\")(addP(1))\n(cubeP)(addP(3))(squareP)(divP(100))(() => \nbranch(\"test\", \"test_2\")(sqrtP)(cubeP)(addP(O.test_2[2])\n(O.test_2[1]))(squareP)(divP(100))(sqrtP)(multP(14))(() =>\nresume(\"test\")(multP(4))(addP(6))))</pre></button>\n\n\n  <br>\n  <h2>O.test is {O.test}</h2>\n  <h2>O.test_2 is {O.test_2}</h2>\n  <br>\n\n  <br>\n  <span class = \"tao\"> Notice the statement: </span>\n  <span style = \"color: #AAFFAA\">()=>addP(O.test_2[2])(O.test_2[1])</span>\n  <span>. Promises in chains of ES6 Promises can't access previous Promise resolution values. One way to get access to prior resolution values is to encapsulate Promise chains in Monad(). This also makes it convenient to resume or branch from terminated computation chains; something that can be accomplished without naming the chains. </span>\n  <br>\n  <br>\n  <br>\n  ",
    "\n\n\n<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\nlet GHC_IO = `module GHC.IO.Unsafe (\n    unsafePerformIO, unsafeInterleaveIO,\n    unsafeDupablePerformIO, unsafeDupableInterleaveIO,\n    noDuplicate,\n  ) where\n\nimport GHC.Base\n\nThis is a \\\"back door\\\" into the \\'IO\\' monad, allowing\\'IO\\' computation to be performed at any time.  For this to be safe, the \\'IO\\' computation should be free of side effects and independent of its environment.\n `\n</script>\n\n<style>\n\nh3 {\n    font-size: 27px;\n}\n#large {\n     font-size: 23px;\n     color: #aaddff;\n}\n</style>\n{#if visible}\n <div style = \"font-family: Times New Roman; text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nHASKELL TUTORIAL SUPPLEMENT\n </div>\n{/if}\n\n<p> If you are learning to program in Haskell, the book or blog or YouTube video on which you rely might be telling you that mutations can occur only inside of monads or somewhere away from a program such as the command line or a browser. You might be learning that mutations and side effects can occur only in the lazy IO monad. If so, don't believe it. You are being misled.  </p>\n<p> Even if you resent being lied to, you might find value in some of the dishonest learning resources. They are trying to teach best practices. Just know know that it is easy to mutate values and types anywhere in a Haskell program. Doing so before you know what your compiler (presumably GHC) will do with your mutations is asking for bugs and crashes.  Here are some unsafe functions with descriptions from their creators and maintainers: </p>\n<p id = large> Unsafe.Coerce </p>\n<p> The highly unsafe primitive unsafeCoerce converts a value from any type to any other type. If you use this function, avoiding runtime errors will be especially challenging if the old and new types have different internal representations. </p>\n<span class = tao> The only function in the Unsafe.Coerce library is unsafeCoerce :: a -> b. You can read more about it at </span>\n<a href = \"http://hackage.haskell.org/package/base-4.12.0.0/docs/Unsafe-Coerce.html\" target = \"_blank\">Unsafe.Coerce</a>\n<br />\n<pre> GHC.IO.Unsafe </pre>\n<p> If the IO computation wrapped in \\'unsafePerformIO\\' performs side effects, then the relative order in which those side effects take place (relative to the main IO trunk, or other calls to \\'unsafePerformIO\\') is indeterminate.  Furthermore, when using \\'unsafePerformIO\\' to cause side-effects, you should take the following precautions to ensure the side effects are performed as many times as you expect them to be.  Note that these precautions are necessary for GHC, but may not be sufficient, and other compilers may require different precautions. </p>\n<span class = tao > For more information, go to </span>\n<a href = \"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.Unsafe.html\" target = \"_blank\"> GHC.IO.Unsafe </a>\n<br />\n<br />\n<span class = tao> And here\\'s a stub on the Haskell Wiki site that isn\\'t generating much interest: </span>\n<a href = \"https://wiki.haskell.org/Unsafe_functions\" target = \"_blank\" > More on GHC.IO.Unsafe </a>\n<span> along with a discussion of mutable global variables in Haskell programs: </span>\n<a href = \"https://wiki.haskell.org/Top_level_mutable_state\" target = \"_blank\"> Top level mutable state </a>\n",
    "\n<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\nlet monadDisplay = `function Monad (z) {\n    var x = z;\n    var foo = function foo (func) {\n        var stop = 'stop';\n        if (func.name === 'stop') return x\n        else {\n            x = func(x);\n            return foo;\n        }\n    };\n    return foo;\n}\n\nconst prod = a => b => a*b;\nconst sum = a => b => a+b;`\n\nlet bonadsD = `function bonads(num) {\nreturn [Monad(num)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-3)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-0)(sum(7))(prod(4))(v=>v-10)(stop)]}`\n\nlet axe = `\nlet mon = Monad(3);\nlet a = mon(x=>x**3)(x=>x+3)(x=>x**2)(stop);\nconsole.log(\"a is\", a)  // a is 900`\n\nlet tree = `\nmon(x => x/100)\nconsole.log(\"mon(stop) now is\",mon(stop))  // mon(stop) now is 9 `\n\nlet fred = `\nlet ar = [];\nlet mon = Monad(3);\nlet mon2 = Monad();\nar.push(mon(stop));\nvar a = mon(x=>x**3)(x=>x+3)(x=>x**2)\nar.push(a);\nar.push(mon(x => x/100);\nar.push(mon2(mon(stop)(x=>x*100)))\nconsole.log(\"ar.map(v=>v('stop')) is\", ar.map(v=>v('stop')))  // [3, 900, 9] `\n\nfunction Monad (z) {\n  var x = z;\n  var stop = \"stop\";\n  var foo = function foo (func) {\n    if (func.name === \"stop\") return x\n    else {\n      x = func(x);\n      return foo;\n    }\n  };\n  return foo;\n}\n\nconst prod = a => b => a*b;\nconst sum = a => b => a+b;\n\nlet num = 6;\n\nlet bonads = function bonads(num) {\nreturn [Monad(num)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-3)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-0)(sum(7))(prod(4))(v=>v-10)(stop)]}\n\n\nlet mona = bonads(num);\nconsole.log(mona)\n\nfunction numF (e) {num = e.target.value; console.log(\"e.target.value is\", e.target.value); return e.target.value}\n\nconsole.log(\"num is\", num);\n</script>\n\n<style>\n.tao {\n  margin-left: 3%;\n}\n\nh3 {\n   font-size: 27px;\n}\n\n#aside {\n    font-size: 18px;\n    color: #eeaaff;\n    font-style: italic;\n}\n</style>\n\n {#if visible}\n \t<div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nA SIMPLE LITTLE MONAD\n \t</div>\n {/if}\n <br>\n <span class=\"tao\"> The word \"monad\" has been around for centuries. Gottfried Leibniz published </span>\n<span style = \"font-style: italic\"> Monadology </span>\n<span> in 1714. The precursor to the familiar symbol of yin-yang, taijitu (太極圖), has a version with two dots added, has been given the august designation: \"The Great Monad\". A single note in music theory is called a monad. All of this is too tangential to warrant references. I Googled around a little to get it and you can too if the word \"monad\" interests you.</span>\n<p> Monads in the Haskell Programming Language were inspired by Category Theory monads. In order to be Category Theory monads, function must exist in a mathematically rigorous \"category\". Haskells objects and functions are not the objects and morphisms of Category Theory. Making a category out of most of Haskell's functions and types is an amusing pasttime for some people, but I doubt that it has any practical value. </p>\n<p> So it should be no surprise that my JavaScript monads are not Category Theory monads. They do obey a JavaScript version of the Haskell monad laws, which are not a requirement in Haskell but are indicative of utility and robustness objects (including functions) don't constitute a category. But functions that hold values and compose with multiple functions that operate on their values behave like Category Theory monads enough to justify calling them \"monads\".</p>\n<p> Here's the definitions of three functions: </p>\n<pre>{monadDisplay}</pre>\n<p> And here is an anonymous monad followed by three functions and \"stop\". : </p>\n<pre> Monad(6)(sum(7))(prod(4))(v=>v-10)(stop) // 42 </pre>\n<p> Anonymous monads never interfere with other monads. The demonstration below illustrates this by running seven anonymous monads in rapid succession. The number you enter is \"num\" in </p>\n{bonadsD}\n<input id = \"one\" type = \"number\" on:input={bonads}  bind:value={num} />\n<p> num is {num} so bonads(num) returns {bonads(num)} </p>\n\n<span class = tao> Named monads retain their values, even after they encounter \"stop\" and return the value of x held in the Monad closure. The following examples illustrate this: </span>\n<pre>\n{axe}\n</pre>\n\n<p> As expected, mon returns which is the \"foo()\" returned by by calling Monad(3):</p>\n\n<p> mon is still the foo() returned by Monad(). Because mon points to x in the context of its creation by Monad(), x will not be garbage collected. Care should be taken not to polute memory with useless x's.</p>\n\n<p> One reason Svelte is so fast and efficient is that it mutates variables and the attributes and methods of objects. Each module in a discrete global space.  When modules are small, applications are easy to organize and mutations don't have unforseen effects in other parts of applications. Svelte shook off the bonds of current conventional \"wisdom\" advocating immutability, virtual DOM, and assigning types to functions. </p>\n<p> The next entry in the monad series defines a variation of Monad that maintains an array of primitive data, function return values, and Promise resolution values. Functions have access to everything in the array when they execute. </p>\n",
    "<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\n\nvar k  = 100000000;\n$: k;\nvar ltTest = x => y => new Filt(x => y < x);\n$: ltTest;\n\nvar isOdd = function isOdd (x) {return new Filt(v => v % 2 === 1)};\nvar _fives = function _fives (x) {\n if (typeof x === \"number\") {return new Filt(v => v % 10 === 5)}\n else if (typeof x === \"string\") {return Filt(v = v(v.length - 1))}\n else {return undefined}''\n}\n\nvar fives = function fives (x) {return new Filt(v => v % 10 === 5)}\n\nvar isOddF = function isOddF (x) {return new Filt(v => v % 2 === 1)};\n\nfunction isOd_ (x) {return new Filt(v => v % 2 === 1)};\nvar lessThan = x => y => new Filt(x => y < x);\n\nfunction tdReduce(base) {\n  return function(reducingFunction) {\n    return (accumulator, value) => {\n      return reducingFunction(accumulator, func(v));\n    }\n  }\n}\n\nfunction tdMap(func) {\n  return function(reducingFunction) {\n    return (accumulator, v) => {\n      return reducingFunction(accumulator, func(v));\n    }\n  }\n}\n\nfunction tdFilter(test) {\n  return function(reducingFunction) {\n    return (accumulator, v) => {\n      return (test(v) ? reducingFunction(accumulator, v) : accumulator)\n    };\n  };\n};\n\nvar ar = \"cowgirl\";\n$: ar;\n\nvar cleanF = function cleanF (arthur = []) {\n  ar = arthur;\n  return ar.filter(\n    a => a === 0 || a && typeof a !== \"boolean\" //\n  ).reduce((a,b)=>a.concat(b),[])\n};\n\n$: cleanF;\n\n\nfunction Monad ( AR = [] )  {\n  var f_, p, run;\n  var ar = AR.slice();\n  var x = ar.pop();\n  return run = (function run (x) {\n    if (x === null || x === NaN ||\n      x === undefined) x = f_('stop').pop();\n    if (x instanceof Filt) {\n      var z = ar.pop();\n      if (x.filt(z)) x = z; else ar = [];\n    }\n    else if (x instanceof Promise) x.then(y =>\n      {if (y != undefined && typeof y !== \"boolean\" && y === y &&\n      y.name !== \"f_\" &&\n      y.name !== \"stop\" ) {\n      ar.push(y);\n    }})\n    else if (x != undefined && x === x  && x !== false\n      && x.name !== \"f_\" && x.name !== \"stop\" ) {\n      ar.push(x);\n    };\n    function f_ (func) {\n      if (func === 'stop' || func === 'S') return ar;\n      else if (func === 'finish' || func === 'F') return Object.freeze(ar);\n      else if (typeof func !== \"function\") p = func;\n      else if (x instanceof Promise) p = x.then(v => func(v));\n      else p = func(x);\n      return run(p);\n    };\n\n    return f_;\n  })(x)\n}\n\nvar mon44 = `function Monad ( AR = [] )  {\n  var f_, p, run;\n  var ar = AR.slice();\n  var x = ar.pop();\n  return run = (function run (x) {\n    if (x === null || x === NaN ||\n      x === undefined) x = f_('stop').pop();\n    if (x instanceof Filt) {\n      var z = ar.pop();\n      if (x.filt(z)) x = z; else ar = [];\n    }\n    else if (x instanceof Promise) x.then(y =>\n      {if (y != undefined && typeof y !== \"boolean\" && y === y &&\n      y.name !== \"f_\" &&\n      y.name !== \"stop\" ) {\n      ar.push(y);\n    }})\n    else if (x != undefined && x === x  && x !== false\n      && x.name !== \"f_\" && x.name !== \"stop\" ) {\n      ar.push(x);\n    };\n    function f_ (func) {\n      if (func === 'stop' || func === 'S') return ar;\n      else if (func === 'finish' || func === 'F') return Object.freeze(ar);\n      else if (typeof func !== \"function\") p = func;\n      else if (x instanceof Promise) p = x.then(v => func(v));\n      else p = func(x);\n      return run(p);\n    };\n\n    return f_;\n  })(x)\n} `\n\nvar compose = (...fns) =>\nfns.reduceRight((prevFn, nextFn) =>\n(...args) => nextFn(prevFn(...args)),\nvalue => value\n);\n\nvar add1 = function add1(v) { return v + 1; };\nvar sum = function sum(total,v) { return total + v; };\nvar cube = function cube(v) { return v**3; };\n\nvar size = 400;\n$: size;\n\nvar ar74 = [...Array(size).keys()];\n$: ar74;\n\nvar mapWRf = mapping(cube);\nvar mapRes = ar74.reduce(mapWRf(concat), []);\n\nvar isEven = x => x % 2 === 0;\nvar not = x => !x;\nvar isOdd2 = compose(not, isEven);\n\nfunction curry(fn) {\n   var arity = fn.length;\n   return function $curry(...args) {\n      if (args.length < arity) {\n         return $curry.bind(null, ...args);\n      }\n      return fn.call(null, ...args);\n   }  ;\n}\n\nvar map = f => ar => ar.map(v=>f(v));\nvar filter = p => ar => ar.filter(p);\nvar reduce = f => ar => v => ar.reduce(f,v)\nfunction apply(x, f) {return f(x);}\nfunction concat(xs, val) {return xs.concat(val);}\n\nfunction mapping(f) {\n   return function(rf) {\n      return (acc, val) => {\n         return rf(acc, f(val));\n      }\n   }\n}\n\nvar A_A = \"H\";\n$: A_A;\n\nvar B_B = \"s\";\n$: B_B;\n\nvar C_C = \"G\";\n$: C_C;\n\nvar D_D = \"I\";\n$: D_D;\n\nvar res1;\n// $: res1;\n\nvar res2;\n// $: res2;\n\nvar res3;\n$: res3;\n\nvar res4;\n$: res4;\n\nvar dotResult = [];\n$: dotResult;\n\nvar test9;\n$: test9;\n\nvar transducerResult;\n$: transducerResult;\n\n\n A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .filter(v => v % 10 === 5)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n   .map(v=>v+1000)\n\n\nvar td3;\n$: td3;\n\nvar xform;\n$: xform;\n\nvar xform2;\n$: xform2;\n\nvar xform3;\n$: xform3\n\n\nvar test8 = k => ltTest(k).filt;;\n\nvar test9\n$: test9;\n\n  function Filt (p) {this.p = p; this.filt = function filt (x) {return p(x)}};\n  var fives = function fives (x) {return new Filt(v => v % 10 === 5)}\n\n  var td1 = x => Monad([x])(isOdd)(v=>v**4)(v=>v+3)(v=>v-3)(fives)(Math.sqrt)('stop').pop()\n  var td2 = y => Monad([y])(v=>v*v)(v=>v+1000)('stop').pop()\n\nres1 = ar74.map(x => td1(x));\nB_B = res2 = res1.map(y => td2(y));\nC_C = res3 = ar74.map(z => td2(td1(z)));\n\n\n   xform = compose(\n      tdFilter(x=>x%2===1),\n      tdMap(x => x**4),\n      tdMap(x => x+3),\n      tdMap(x => x-3),\n      tdFilter(x => x % 10 === 5),\n      tdMap(x => Math.sqrt(x))\n   )\n   xform2 = compose(\n      tdMap(x=>x*x),\n      tdMap(x=>x+1000)\n   );\n\n   xform3 = compose(\n      tdFilter(x=>x%2===1),\n      tdMap(x => x**4),\n      tdMap(x => x+3),\n      tdMap(x => x-3),\n      tdFilter(x => x % 10 === 5),\n      tdMap(x => Math.sqrt(x)),\n      tdMap(x=>x*x),\n      tdMap(x=>x+1000)\n   );\n   D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n   $: transducerResult = ar74.reduce(xform3(concat),[] );\n\n   $: A_A = dotResult;\n   $: B_B = cleanF(res2);\n   $: C_C = cleanF(res3);\n   $: D_D = transducerResult;\n\nvar t37;\n$: t37;\nfunction test37 (e) {t37 = e; console.log(e)};\n\n\n$: dotResult;\n$: res2;\n$: res3;\n$: transducerResult;\n\nvar callback = `function increase () {\n  size = size + 10;\n  ar74 = [...Array(size).keys()];\n   A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .filter(v => v % 10 === 5)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n  res1 = ar74.map(x => td1(x));\n  B_B = res2 = res1.map(y => td2(y));\n  C_C = res3 = ar74.map(z => td2(td1(z)));\n  D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n}\n\n  function Filt (p) {this.p = p; this.filt = function filt (x) {return p(x)}};\n  var fives = function fives (x) {return new Filt(v => v % 10 === 5)}\n  var isOdd = function isOdd (x) {return new Filt(v => v % 2 === 1)};\n\n  var td1 = x => Monad([x])(isOdd)(v=>v**4)(v=>v+3)\n    (v=>v-3)(fives)(Math.sqrt)('stop').pop()\n  res1 = ar74.map(x => td1(x));\n  var td2 = y => Monad([y])(v=>v*v)(v=>v+1000)('stop').pop()`\n\nvar call2 = `xform3 = compose(\n    tdFilter(x=>x%2===1),\n    tdMap(x => x**4),\n    tdMap(x => x+3),\n    tdMap(x => x-3),\n    tdFilter(x => x % 10 === 5),\n    tdMap(x => Math.sqrt(x)),\n    tdMap(x=>x*x),\n    tdMap(x=>x+1000)\n  );\n\n  function tdMap(func) {\n    return function(reducingFunction) {\n      return (accumulator, v) => {\n        return reducingFunction(accumulator, func(v));\n      }\n    }\n  }\n\n  function tdFilter(test) {\n    return function(reducingFunction) {\n      return (accumulator, v) => {\n        return (test(v) ? reducingFunction(accumulator, v) : accumulator)\n      };\n    };\n  }; `\n\n  function increase () {\n    size = size + 10;\n    ar74 = [...Array(size).keys()];\n    res1 = ar74.map(x => td1(x));\n     A_A = dotResult = ar74\n     .filter(v => (v % 2 === 1))\n     .map(x => x**4)\n     .map(x => x+3)\n     .map(x => x-3)\n     .filter(v => v % 10 === 5)\n     .map(x => Math.sqrt(x))\n     .map(v=>v*v)\n     .map(v=>v+1000)\n    B_B = res2 = res1.map(y => td2(y));\n    C_C = res3 = ar74.map(z => td2(td1(z)));\n    D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n  }\n\nfunction decrease () {\n  size = size - 10;\n  ar74 = [...Array(size).keys()];\n  res1 = ar74.map(x => td1(x));\n   A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .filter(v => v % 10 === 5)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n   .map(v=>v+1000)\n  B_B = res2 = res1.map(y => td2(y));\n  C_C = res3 = ar74.map(z => td2(td1(z)));\n  D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n}\n\n$: size;\n$: ar74;\n$: increase;\n$: decrease;\nincrease();\ndecrease();\n  </script>\n<style>\n.p {\n  color: #FFAAAA;;\n  font-size: 20px;\n}\n.q {\n  color: #FFFFAA;\n}\n</style>\n{#if visible}\n <div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nTRANSDUCER SIMULATION\n </div>\n{/if}\n\n<p> The tradition JavaScript method of composing functions using mainly map, filter, and reduce dot notation (eg. \"array.map(func1).filter(func2).map(func3)\") polutes memory with arrays that are used only to compute the next array in a chain. Moreover, each of the soon-to-be useless arrays must be traversed. When arrays are large and numerous functions are involved, this can be a performance bottleneck.</p>\n<p> Transducers provide an ingenious solution to the problem. Any JavaScript developer who hasn't already done so would do well to get a good night's sleep, drink a big cup of coffee, and wrap his or her head around the transducer algorithm.</p>\n<p> Another, more straightforward one-array-traversal solution is to use monads. This post shows the result of an array being traversed only one time and, with the help of a monad, undersoing multiple transformations by a collection of functions. The result is the same result obtained by the dot method and a standard transducer.</p>\n<p> The following results were obtained by eight transformations on an array of the first 100 integers:</p>\n<br><br>\n<div>Result length is {transducerResult.length}</div>\n<br><br>\n<div class = p> Traditional dot composition </div>\n<br>\n<div class = q >[{A_A.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition in two stages using Monad </div>\n<br>\n<div class = q > [{B_B.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition in one traversal using Monad </div>\n<br>\n<div class = q > [{C_C.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition using a standard transducer </div>\n<br>\n<div class = q > [{D_D.join(\", \")}]</div>\n<br>\n<br>\n<button class = but on:click = {increase}>INCREASE</button>\n<button class = but on:click = {decrease}>DECREASE</button>\n<br><br>\n<div>Array length: {size}</div>\n<br>\n<div>ar74: [{ar74.join(\", \")}]</div>\n<br>\n<div>The modified Monad (below) could benefit from some refactoring, but it does what needs to be done for this demo. The point is that a standard transducer and Monad both use one array traversal to accomplish what the built-in dot method does by traversing the original array and seven intermediary arrays. </div>\n<pre>{mon44}</pre>\n<p> On my desktop computer, when ar74.length === 100,000 I got this and similar results: </p>\n<div style = \"color: #BBFFBB\">ar74.length = 100,000:</div>\n\n<pre>Dot method:: 25 ms\nMonad two traversals: 255 ms\nMonad one traversal: 220 ms\nTransducer: 26 ms </pre>\n<p> ar74.length === 1,000,000 was about as far as I could go without crashing the browser. Here are two typical results: </p>\n\n<div style = \"color: #BBFFBB\">Two runs with ar74.length = 1,000,000:</div>\n\n<pre>Dot method:: 276\nMonad two traversals: 2140\nMonad one traversal: 2060\nTransducer: 180\n\nDot method:: 312\nMonad two traversals: 2093\nMonad one traversal: 2115\nTransducer: 176 </pre>\n<p> As you see, the built-in JavaScript dot method and the transducer gave similar results. The Monad methods are much slower. They're just a proof-of-concept hacks showing the versitility of monads spawned by Monad(). </p>\n<p> Here's the definition of the increase button's callback function along with the definitions of some assoc some supportingrelated: </p>\n<pre>{callback}</pre>\n<p> And here's some of the code behind the transducer demonstration: </p>\n<pre>{call2}</pre>\n<span> The rest of the code can be found in the </span>\n<a href = \"https://github.com/dschalk/blog\">Github repository</a>\n<span>.</span>\n",
    "<script>\n\tlet current = 'foo';\n     \n    export let num;\n\texport let mod;\n\t/* we don't need to declare `squared` and `cubed`\n\t — Svelte does it for us\n\t$: squared = num * num;\n\t$: cubed = squared * num; */\n\n\tnum = 0;\n\tmod = 5;\n\n\tsetInterval(() => {if (mod) num = (num+=1)%mod}, 1000)\n\t\n</script>\n\n<style>\n\tbutton {\n\t\tdisplay: block;\n\t}\n\n\t.active {\n\t\tbackground-color: #0000FF;\n\t\tcolor: #FF0000;\n\t}\n\n   \n\tinput {\n\t\twidth: 50px;\n\t}\n</style>\n\n<p>{num +1}</p>\n <span>Seconds modulo </span>\n<input bind:value = {mod} > \n\n<button\n\tclass:active={current === 'foo'}\n\ton:click={() => current = 'foo'}\n>foo</button>\n\n<button\n\tclass:active={current === 'bar'}\n\ton:click={() => current = 'bar'}\n>bar</button>\n\n<button\n\tclass:active={current === 'baz'}\n\ton:click={() => current = 'baz'}\n>baz</button>\n",
    "<script>\n\nimport {fade} from \"svelte/transition\"\n\nlet visible = true;\n</script>\n\n<style>\n\nh3 {\n    font-size: 27px;\n}\n#large {\n     font-size: 23px;\n     color: #aaddff;\n}\n</style>\n{#if visible}\n <div style = \"font-family: Times New Roman; text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nFUNCTIONAL PROGRAMMING WITH JAVASCRIPT\n </div>}\n{/if}\n<p> \"Functional programming\" means different things to different people. Applied to JavaScript, I wish it meant making good use JavaScript functions. \n\n\n<p>Mimicking features of the Haskell programming language vaguely hoping Haskell's reliability, ease of maintenance, and other conveniences will come your way reminds me of the cargo cults. \"The name derives from the belief which began among Melanesians in the late 19th and early 20th centuries that various ritualistic acts such as the building of an airplane runway will result in the appearance of material wealth, particularly highly desirable Western goods (i.e., \"cargo\"), via Western airplanes.\" </p>  \n\n\n<a href = \"https://en.wikipedia.org/wiki/Cargo_cult\" target=\"_blank\">Cargo Cult</a>\n\n<p>According to the Wikipedia article \"Cargo Cult\", \"a cargo cult is a belief system among members of a relatively undeveloped society in which adherents practice superstitious rituals hoping to bring modern goods supplied by a more technologically advanced society. https://en.wikipedia.org/wiki/Cargo_cult The article goes on to say, \"The name derives from the belief which began among Melanesians in the late 19th and early 20th centuries that various ritualistic acts such as the building of an airplane runway will result in the appearance of material wealth, particularly highly desirable Western goods (i.e., \"cargo\"), via Western airplanes.\" citing Burridge, Kenelm (1969). New Heaven, New Earth: A study of Millenarian Activities. London: Basil Blackwell. p. 48 and Lindstrom, Lamont (1993). Cargo Cult: Strange Stories of desire from Melanesia and beyond. Honolulu: University of Hawaii Press.</p>\n\n<p>Haskell programming language code has, in my experience, been wonderfully reliable and maintainable. The WebSockets server supporting two games and one of the monad demonstrations is a good example. Hoping to bring some of this Haskell goodness into my JavaScript code, I toyed with what I call \"cargo cult functional JavaScript\" for a time. Without thinking things through intelligently, I imposed strict type checking, referential transparency, and immutability on my JavaScript code in situations where these things needlessly caused clutter, inefficiency, code bloat, and obfuscation. I invented all sorts of \"monads\" along with monad transformers and mechanisms for lifting values into composite monadic types.</p>\n\n\n<p>Now that I have abandoned the folly of mindlessly mimicking features of functional programming languages, I can console myself with the thought that I wasn't the first and I wasn't the last JavaScript programmer to got lost in this manner. Strict typing where it serves no useful purpose and insisting on immutability where all it does is polute memory with useless intermediate values is trendy these days. </p>\n<p> Code where functions might collide over mutable global variables leads programmers to religeously avoid mutable global variables. I'm using the Svelte framework for this project, and my numerous modules are quite small. Mutable global variables can't cause problems because I have no modules or heirarchies of nested modules in which clashes might occur. Were I to constrain my creativity by following \"best practices\" regarding global variables, I would be engaging in another form of cargo cult coding, mindlessly micking forms that have no value.</p>\n\n\n<h3>References</h3>\n\n<pre>Cargo Cult Programming video presentation\nhttps://www.youtube.com/watch?v=nm22duia0jU\n\nCargo Cult Science Richard Feynman' s 1974 video\nhttps://www.brainpickings.org/2012/06/08/richard-\n  feynman-caltech-cargo-cult-science/s</pre>",
    "<script>\n  import { beforeUpdate, createEventDispatcher, onDestroy, onMount, tick } from 'svelte';\n  import List from './List.svelte';\n  import ItemComponent from './Item.svelte';\n  import SelectionComponent from './Selection.svelte';\n  import MultiSelectionComponent from './MultiSelection.svelte';\n  import isOutOfViewport from './utils/isOutOfViewport';\n  import debounce from './utils/debounce';\n\n  const dispatch = createEventDispatcher();\n  export let container = undefined;\n  export let input = undefined;\n  export let Item = ItemComponent;\n  export let Selection = SelectionComponent;\n  export let MultiSelection = MultiSelectionComponent;\n  export let isMulti = false;\n  export let isDisabled = false;\n  export let isCreatable = false;\n  export let isFocused = false;\n  export let selectedValue = undefined;\n  export let filterText = '';\n  export let placeholder = 'Select...';\n  export let items = [];\n  export let itemFilter = (label, filterText, option) => label.toLowerCase().includes(filterText.toLowerCase());\n  export let groupBy = undefined;\n  export let groupFilter = (groups) => groups;\n  export let isGroupHeaderSelectable = false;\n  export let getGroupHeaderLabel = (option) => {\n    return option.label\n  };\n  export let getOptionLabel = (option, filterText) => {\n    return option.isCreator ? `Create \\\"${filterText}\\\"` : option.label;\n  };\n  export let optionIdentifier = 'value';\n  export let loadOptions = undefined;\n  export let hasError = false;\n  export let containerStyles = '';\n  export let getSelectionLabel = (option) => {\n    if (option) return option.label\n  };\n\n  export let createGroupHeaderItem = (groupValue) => {\n    return {\n      value: groupValue,\n      label: groupValue\n    }\n  };\n\n  export let createItem = (filterText) => {\n    return {\n      value: filterText,\n      label: filterText\n    };\n  };\n\n  export let isSearchable = true;\n  export let inputStyles = '';\n  export let isClearable = true;\n  export let isWaiting = false;\n  export let listPlacement = 'auto';\n  export let listOpen = false;\n  export let list = undefined;\n  export let isVirtualList = false;\n  export let loadOptionsInterval = 300;\n  export let noOptionsMessage = 'No options';\n  export let hideEmptyState = false;\n  export let filteredItems = [];\n  export let inputAttributes = {};\n  export let listAutoWidth = true;\n  \n\n  let target;\n  let activeSelectedValue;\n  let _items = [];\n  let originalItemsClone;\n  let containerClasses = '';\n  let prev_selectedValue;\n  let prev_listOpen;\n  let prev_filterText;\n  let prev_isFocused;\n  let prev_filteredItems;\n\n  async function resetFilter() {\n    await tick();\n    filterText = '';\n  }\n\n  const getItems = debounce(async () => {\n    isWaiting = true;\n    \n    items = await loadOptions(filterText);\n  \n    isWaiting = false;\n    isFocused = true;\n    listOpen = true;\n  }, loadOptionsInterval);\n\n  $: {\n    containerClasses = `selectContainer`;\n    containerClasses += isMulti ? ' multiSelect' : '';\n    containerClasses += isDisabled ? ' disabled' : '';\n    containerClasses += isFocused ? ' focused' : '';\n  }\n\n  $: {\n    if (typeof selectedValue === 'string') {\n      selectedValue = { [optionIdentifier]: selectedValue, label: selectedValue }\n    }\n  }\n\n  $: showSelectedItem = selectedValue && filterText.length === 0;\n\n  $: placeholderText = selectedValue ? '' : placeholder;\n\n  let _inputAttributes = {};\n  $: {\n    _inputAttributes = Object.assign(inputAttributes, {\n      autocomplete: 'off',\n      autocorrect: 'off',\n      spellcheck: false\n    })\n\n    if (!isSearchable) {\n      _inputAttributes.readonly = true;\n    }\n  }\n\n  $: {\n    let _filteredItems;\n    let _items = items;\n\n    if (items && items.length > 0 && typeof items[0] !== 'object') {\n      _items = items.map((item, index) => {\n        return {\n          index,\n          value: item,\n          label: item\n        }\n      })\n    }\n\n    if (loadOptions && filterText.length === 0 && originalItemsClone) {\n      _filteredItems = JSON.parse(originalItemsClone);\n      _items = JSON.parse(originalItemsClone);\n    } else {\n      _filteredItems = loadOptions ? filterText.length === 0 ? [] : _items : _items.filter(item => {\n\n        let keepItem = true;\n\n        if (isMulti && selectedValue) {\n          keepItem = !selectedValue.find((value) => {\n            return value[optionIdentifier] === item[optionIdentifier]\n          });\n        }\n\n        if (!keepItem) return false;\n        if (filterText.length < 1) return true;\n        return itemFilter(getOptionLabel(item, filterText), filterText, item);\n      });\n    }\n\n    if (groupBy) {\n      const groupValues = [];\n      const groups = {};\n\n      _filteredItems.forEach((item) => {\n        const groupValue = groupBy(item);\n\n        if (!groupValues.includes(groupValue)) {\n          groupValues.push(groupValue);\n          groups[groupValue] = [];\n\n          if(groupValue) {\n            groups[groupValue].push(Object.assign(\n              createGroupHeaderItem(groupValue, item), \n              { \n                id: groupValue, \n                isGroupHeader: true, \n                isSelectable: isGroupHeaderSelectable\n              }\n            ));\n          }\n        }\n        \n        groups[groupValue].push(Object.assign({ isGroupItem: !!groupValue }, item));\n      });\n\n      const sortedGroupedItems = [];\n\n      groupFilter(groupValues).forEach((groupValue) => {\n        sortedGroupedItems.push(...groups[groupValue]);\n      });\n\n      filteredItems = sortedGroupedItems;\n    } else {\n      filteredItems = _filteredItems;\n    }\n  }\n\n  beforeUpdate(() => {\n    if (isMulti && selectedValue && selectedValue.length > 1) {\n      checkSelectedValueForDuplicates();\n    }\n\n    if (!isMulti && selectedValue && prev_selectedValue !== selectedValue) {\n      if (!prev_selectedValue || JSON.stringify(selectedValue[optionIdentifier]) !== JSON.stringify(prev_selectedValue[optionIdentifier])) {\n        dispatch('select', selectedValue);\n      }\n    }\n\n    if (isMulti && JSON.stringify(selectedValue) !== JSON.stringify(prev_selectedValue)) {\n      if (checkSelectedValueForDuplicates()) {\n        dispatch('select', selectedValue);\n      }\n    }\n\n    if (container && listOpen !== prev_listOpen) {\n      if (listOpen) {\n        loadList();\n      } else {\n        removeList();\n      }\n    }\n\n    if (filterText !== prev_filterText) {\n      if (filterText.length > 0) {\n        isFocused = true;\n        listOpen = true;\n\n        if (loadOptions) {\n          getItems();\n        } else {\n          loadList();\n          listOpen = true;\n\n          if (isMulti) {\n            activeSelectedValue = undefined\n          }\n        }\n      } else {\n        setList([])\n      }\n\n      if (list) {\n        list.$set({\n          filterText\n        });\n      }\n    }\n\n    if (isFocused !== prev_isFocused) {\n      if (isFocused || listOpen) {\n        handleFocus();\n      } else {\n        resetFilter();\n        if (input) input.blur();\n      }\n    }\n\n    if (prev_filteredItems !== filteredItems) {\n      let _filteredItems = [...filteredItems];\n\n      if (isCreatable && filterText) {\n        const itemToCreate = {\n          ...createItem(filterText),\n          isCreator: true\n        };\n\n        const existingItemWithFilterValue = _filteredItems.find((item) => {\n          return item[optionIdentifier] === itemToCreate[optionIdentifier];\n        });\n\n        let existingSelectionWithFilterValue;\n\n        if (selectedValue) {\n          if (isMulti) {\n            existingSelectionWithFilterValue = selectedValue.find((selection) => {\n              return selection[optionIdentifier] === itemToCreate[optionIdentifier];\n            });\n          } else if (selectedValue[optionIdentifier] === itemToCreate[optionIdentifier]) {\n            existingSelectionWithFilterValue = selectedValue;\n          }\n        }\n\n        if (!existingItemWithFilterValue && !existingSelectionWithFilterValue) {\n          _filteredItems = [..._filteredItems, itemToCreate];\n        }\n      }\n\n      setList(_filteredItems);\n    }\n\n    prev_selectedValue = selectedValue;\n    prev_listOpen = listOpen;\n    prev_filterText = filterText;\n    prev_isFocused = isFocused;\n    prev_filteredItems = filteredItems;\n  });\n\n  function checkSelectedValueForDuplicates() {\n    let noDuplicates = true;\n    if (selectedValue) {\n      const ids = [];\n      const uniqueValues = [];\n\n      selectedValue.forEach(val => {\n        if (!ids.includes(val[optionIdentifier])) {\n          ids.push(val[optionIdentifier]);\n          uniqueValues.push(val);\n        } else {\n          noDuplicates = false;\n        }\n      })\n\n      selectedValue = uniqueValues\n    }\n    return noDuplicates;\n  }\n\n  async function setList(items) {\n    await tick();\n    if (list) return list.$set({ items })\n    if (loadOptions && items.length > 0) loadList();\n  }\n\n  function handleMultiItemClear(event) {\n    const { detail } = event;\n    const itemToRemove = selectedValue[detail ? detail.i : selectedValue.length - 1];\n\n    if (selectedValue.length === 1) {\n      selectedValue = undefined;\n    } else {\n      selectedValue = selectedValue.filter((item) => {\n        return item !== itemToRemove;\n      });\n    }\n\n    dispatch('clear', itemToRemove);\n    \n    getPosition();\n  }\n\n  async function getPosition() {\n    await tick();\n    if (!target || !container) return;\n    const { top, height, width } = container.getBoundingClientRect();\n\n    target.style['min-width'] = `${width}px`;\n    target.style.width = `${listAutoWidth ? 'auto' : '100%'}`;\n    target.style.left = '0';\n\n    if (listPlacement === 'top') {\n      target.style.bottom = `${height + 5}px`;\n    } else {\n      target.style.top = `${height + 5}px`;\n    }\n\n    target = target;\n\n    if (listPlacement === 'auto' && isOutOfViewport(target).bottom) {\n      target.style.top = ``;\n      target.style.bottom = `${height + 5}px`;\n    }\n\n    target.style.visibility = '';\n  }\n\n  function handleKeyDown(e) {\n    if (!isFocused) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        listOpen = true;\n        activeSelectedValue = undefined;\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        listOpen = true;\n        activeSelectedValue = undefined;\n        break;\n      case 'Tab':\n        if (!listOpen) isFocused = false;\n        break;\n      case 'Backspace':\n        if (!isMulti || filterText.length > 0) return;\n        if (isMulti && selectedValue && selectedValue.length > 0) {\n          handleMultiItemClear(activeSelectedValue !== undefined ? activeSelectedValue : selectedValue.length - 1);\n          if (activeSelectedValue === 0 || activeSelectedValue === undefined) break;\n          activeSelectedValue = selectedValue.length > activeSelectedValue ? activeSelectedValue - 1 : undefined;\n        }\n        break;\n      case 'ArrowLeft':\n        if (list) list.$set({ hoverItemIndex: -1 });\n        if (!isMulti || filterText.length > 0) return;\n\n        if (activeSelectedValue === undefined) {\n          activeSelectedValue = selectedValue.length - 1;\n        } else if (selectedValue.length > activeSelectedValue && activeSelectedValue !== 0) {\n          activeSelectedValue -= 1\n        }\n        break;\n      case 'ArrowRight':\n        if (list) list.$set({ hoverItemIndex: -1 });\n        if (!isMulti || filterText.length > 0 || activeSelectedValue === undefined) return;\n        if (activeSelectedValue === selectedValue.length - 1) {\n          activeSelectedValue = undefined;\n        } else if (activeSelectedValue < selectedValue.length - 1) {\n          activeSelectedValue += 1;\n        }\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isFocused = true;\n    if (input) input.focus();\n  }\n\n  function removeList() {\n    resetFilter();\n    activeSelectedValue = undefined;\n\n    if (!list) return;\n    list.$destroy();\n    list = undefined;\n\n    if (!target) return;\n    if (target.parentNode) target.parentNode.removeChild(target);\n    target = undefined;\n\n    list = list;\n    target = target;\n  }\n\n  function handleWindowClick(event) {\n    if (!container) return;\n    if (container.contains(event.target)) return;\n    isFocused = false;\n    listOpen = false;\n    activeSelectedValue = undefined;\n    if (input) input.blur();\n  }\n\n  function handleClick() {\n    if (isDisabled) return;\n    isFocused = true;\n    listOpen = !listOpen;\n  }\n\n  export function handleClear() {\n    selectedValue = undefined;\n    listOpen = false;\n    dispatch('clear', selectedValue);\n    handleFocus();\n  }\n\n  async function loadList() {\n    await tick();\n    if (target && list) return;\n\n    const data = {\n      Item,\n      filterText,\n      optionIdentifier,\n      noOptionsMessage,\n      hideEmptyState,\n      isVirtualList,\n      selectedValue,\n      isMulti,\n      getGroupHeaderLabel,\n      items: filteredItems\n    };\n\n    if (getOptionLabel) {\n      data.getOptionLabel = getOptionLabel;\n    }\n\n    target = document.createElement('div');\n\n    Object.assign(target.style, {\n      position: 'absolute',\n      'z-index': 2,\n      'visibility': 'hidden'\n    });\n\n    list = list;\n    target = target;\n    if (container) container.appendChild(target);\n\n    list = new List({\n      target,\n      props: data\n    });\n\n    list.$on('itemSelected', (event) => {\n      const { detail } = event;\n\n      if (detail) {\n        const item = Object.assign({}, detail);\n\n        if (isMulti) {\n          selectedValue = selectedValue ? selectedValue.concat([item]) : [item];\n        } else {\n          selectedValue = item;\n        }\n\n        resetFilter();\n        selectedValue = selectedValue;\n\n        setTimeout(() => {\n          listOpen = false;\n          activeSelectedValue = undefined;\n        });\n      }\n    });\n\n    list.$on('itemCreated', (event) => {\n      const { detail } = event;\n      if (isMulti) {\n        selectedValue = selectedValue || [];\n        selectedValue = [...selectedValue, createItem(detail)]\n      } else {\n        selectedValue = createItem(detail)\n      }\n\n      filterText = '';\n      listOpen = false;\n      activeSelectedValue = undefined;\n      resetFilter();\n    });\n    \n    list.$on('closeList', () => {\n      listOpen = false;\n    });\n  \n    list = list,\n    target = target;\n    getPosition();\n  }\n\n  onMount(() => {\n    if (isFocused) input.focus();\n    if (listOpen) loadList();\n\n    if (items && items.length > 0) {\n      originalItemsClone = JSON.stringify(items);\n    }\n\n    if (selectedValue) {\n      if (isMulti) {\n        selectedValue = selectedValue.map(item => {\n          if (typeof item === 'string') {\n            return { value: item, label: item }\n          } else {\n            return item;\n          }\n        })\n      }\n    }\n  });\n\n  onDestroy(() => {\n    removeList()\n  });\n</script>\n\n<svelte:window on:click=\"{handleWindowClick}\" on:keydown=\"{handleKeyDown}\" on:resize=\"{getPosition}\" />\n\n<div class=\"{containerClasses} {hasError ? 'hasError' : ''}\" style=\"{containerStyles}\" on:click=\"{handleClick}\"\n  bind:this={container}>\n\n  {#if isMulti && selectedValue && selectedValue.length > 0}\n  <svelte:component\n    this=\"{MultiSelection}\"\n    {selectedValue}\n    {getSelectionLabel}\n    {activeSelectedValue}\n    {isDisabled}\n    on:multiItemClear=\"{handleMultiItemClear}\"\n    on:focus=\"{handleFocus}\"\n  />\n  {/if}\n\n  <input\n    {..._inputAttributes}\n    bind:this={input}\n    on:focus=\"{handleFocus}\"\n    bind:value=\"{filterText}\"    \n    placeholder=\"{placeholderText}\"\n    disabled=\"{isDisabled}\"\n    style=\"{inputStyles}\"\n  >\n\n  {#if !isMulti && showSelectedItem }\n  <div class=\"selectedItem\" on:focus=\"{handleFocus}\">\n    <svelte:component this=\"{Selection}\" item={selectedValue} {getSelectionLabel}/>\n  </div>\n  {/if}\n\n  {#if showSelectedItem && isClearable && !isDisabled && !isWaiting}\n  <div class=\"clearSelect\" on:click|preventDefault=\"{handleClear}\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"-2 -2 50 50\" focusable=\"false\"\n         role=\"presentation\">\n      <path fill=\"currentColor\"\n            d=\"M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z\"></path>\n    </svg>\n  </div>\n  {/if}\n\n  {#if !isSearchable && !isDisabled && !isWaiting && (showSelectedItem && !isClearable || !showSelectedItem)}\n  <div class=\"indicator\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 20 20\" focusable=\"false\" class=\"css-19bqh2r\">\n      <path\n        d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  </div>\n  {/if}\n\n  {#if isWaiting}\n  <div class=\"spinner\">\n    <svg class=\"spinner_icon\" viewBox=\"25 25 50 50\">\n      <circle class=\"spinner_path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"5\"\n              stroke-miterlimit=\"10\"></circle>\n    </svg>\n  </div>\n  {/if}\n</div>\n\n<style>\n  .selectContainer {\n    border: var(--border, 1px solid #D8DBDF);\n    border-radius: var(--borderRadius, 3px);\n    height: var(--height, 42px);\n    position: relative;\n    display: flex;\n    padding: var(--padding, 0 16px);\n    background: var(--background, #fff);\n  }\n\n  .selectContainer input {\n    cursor: default;\n    border: none;\n    color: var(--inputColor, #3F4F5F);\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--padding, 0 16px);\n    width: 100%;\n    background: transparent;\n    font-size: var(--inputFontSize, 14px);\n    letter-spacing: var(--inputLetterSpacing, -0.08px);\n    position: absolute;\n    left: 0;\n  }\n\n  .selectContainer input::placeholder {\n    color: var(--placeholderColor, #78848F);\n  }\n\n  .selectContainer input:focus {\n    outline: none;\n  }\n\n  .selectContainer:hover {\n    border-color: var(--borderHoverColor, #b2b8bf);\n  }\n\n  .selectContainer.focused {\n    border-color: var(--borderFocusColor, #006FE8);\n  }\n\n  .selectContainer.disabled {\n    background: var(--disabledBackground, #EBEDEF);\n    border-color: var(--disabledBorderColor, #EBEDEF);\n    color: var(--disabledColor, #C1C6CC);\n  }\n\n  .selectContainer.disabled input::placeholder {\n    color: var(--disabledPlaceholderColor, #C1C6CC);\n  }\n\n  .selectedItem {\n    line-height: var(--height, 42px);\n    height: var(--height, 42px);\n    overflow-x: hidden;\n    padding: var(--selectedItemPadding, 0 20px 0 0);\n  }\n\n  .selectedItem:focus {\n    outline: none;\n  }\n\n  .clearSelect {\n    position: absolute;\n    right: var(--clearSelectRight, 10px);\n    top: var(--clearSelectTop, 11px);\n    bottom: var(--clearSelectBottom, 11px);\n    width: var(--clearSelectWidth, 20px);\n    color: var(--clearSelectColor, #c5cacf);\n    flex: none !important;\n  }\n\n  .clearSelect:hover {\n    color: var(--clearSelectHoverColor, #2c3e50);\n  }\n\n  .selectContainer.focused .clearSelect {\n    color: var(--clearSelectFocusColor, #3F4F5F)\n  }\n\n  .indicator {\n    position: absolute;\n    right: var(--indicatorRight, 10px);\n    top: var(--indicatorTop, 11px);\n    width: var(--indicatorWidth, 20px);\n    height: var(--indicatorHeight, 20px);\n    color: var(--indicatorColor, #c5cacf);\n  }\n\n  .indicator svg {\n    display: inline-block;\n    fill: var(--indicatorFill, currentcolor);\n    line-height: 1;\n    stroke: var(--indicatorStroke, currentcolor);\n    stroke-width: 0;\n  }\n\n  .spinner {\n    position: absolute;\n    right: var(--spinnerRight, 10px);\n    top: var(--spinnerLeft, 11px);\n    width: var(--spinnerWidth, 20px);\n    height: var(--spinnerHeight, 20px);\n    color: var(--spinnerColor, #51ce6c);\n    animation: rotate 0.75s linear infinite;\n  }\n\n  .spinner_icon {\n    display: block;\n    height: 100%;\n    transform-origin: center center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n    -webkit-transform: none;\n  }\n\n  .spinner_path {\n    stroke-dasharray: 90;\n    stroke-linecap: round;\n  }\n\n  .multiSelect {\n    display: flex;\n    padding: var(--multiSelectPadding, 0 35px 0 16px);\n    height: auto;\n    flex-wrap: wrap;\n  }\n\n  .multiSelect > * {\n    flex: 1 1 50px;\n  }\n\n  .selectContainer.multiSelect input {\n    padding: var(--multiSelectInputPadding, 0);\n    position: relative;\n    margin: var(--multiSelectInputMargin, 0);\n  }\n\n  .hasError {\n    border: var(--errorBorder, 1px solid #FF2D55);\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n",
    "<script>\n  import { beforeUpdate, createEventDispatcher, onDestroy, onMount, tick } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let container = undefined;\n\n  import ItemComponent from './Item.svelte';\n  import VirtualList from './VirtualList.svelte';\n\n  export let Item = ItemComponent;\n  export let isVirtualList = false;\n  export let items = [];\n  export let getOptionLabel = (option, filterText) => {\n    if (option) return option.isCreator ? `Create \\\"${filterText}\\\"` : option.label;\n  };\n  export let getGroupHeaderLabel = (option) => { return option.label };\n  export let itemHeight = 40;\n  export let hoverItemIndex = 0;\n  export let selectedValue = undefined;\n  export let optionIdentifier = 'value';\n  export let hideEmptyState = false;\n  export let noOptionsMessage = 'No options';\n  export let isMulti = false;\n  export let activeItemIndex = 0;\n  export let filterText = '';\n\n  let isScrollingTimer = 0;\n  let isScrolling = false;\n  let prev_items;\n  let prev_activeItemIndex;\n  let prev_selectedValue;\n\n  onMount(() => {\n    if (items.length > 0 && !isMulti && selectedValue) {\n      const _hoverItemIndex = items.findIndex((item) => item[optionIdentifier] === selectedValue[optionIdentifier]);\n\n      if (_hoverItemIndex) {\n        hoverItemIndex = _hoverItemIndex;\n      }\n    }\n\n    scrollToActiveItem('active');\n\n\n    container.addEventListener('scroll', () => {\n      clearTimeout(isScrollingTimer);\n\n      isScrollingTimer = setTimeout(() => {\n        isScrolling = false;\n      }, 100);\n    }, false);\n  });\n\n  onDestroy(() => {\n    // clearTimeout(isScrollingTimer);\n  });\n\n  beforeUpdate(() => {\n\n    if (items !== prev_items && items.length > 0) {\n      hoverItemIndex = 0;\n    }\n\n\n    // if (prev_activeItemIndex && activeItemIndex > -1) {\n    //   hoverItemIndex = activeItemIndex;\n\n    //   scrollToActiveItem('active');\n    // }\n    // if (prev_selectedValue && selectedValue) {\n    //   scrollToActiveItem('active');\n\n    //   if (items && !isMulti) {\n    //     const hoverItemIndex = items.findIndex((item) => item[optionIdentifier] === selectedValue[optionIdentifier]);\n\n    //     if (hoverItemIndex) {\n    //       hoverItemIndex = hoverItemIndex;\n    //     }\n    //   }\n    // }\n\n    prev_items = items;\n    prev_activeItemIndex = activeItemIndex;\n    prev_selectedValue = selectedValue;\n  });\n\n  function itemClasses(hoverItemIndex, item, itemIndex, items, selectedValue, optionIdentifier, isMulti) {\n    return `${selectedValue && !isMulti && (selectedValue[optionIdentifier] === item[optionIdentifier]) ? 'active ' : ''}${hoverItemIndex === itemIndex || items.length === 1 ? 'hover' : ''}`;\n  }\n\n  function handleSelect(item) {\n    if (item.isCreator) return;\n    dispatch('itemSelected', item);\n  }\n\n  function handleHover(i) {\n    if (isScrolling) return;\n    hoverItemIndex = i;\n  }\n\n  function handleClick(args) {\n    const { item, i, event } = args;\n    event.stopPropagation();\n\n    if (selectedValue && !isMulti && selectedValue[optionIdentifier] === item[optionIdentifier]) return closeList();\n\n    if (item.isCreator) {\n      dispatch('itemCreated', filterText);\n    } else {\n      activeItemIndex = i;\n      hoverItemIndex = i;\n      handleSelect(item);\n    }\n  }\n\n  function closeList() {\n    dispatch('closeList');\n  }\n\n  async function updateHoverItem(increment) {\n    if (isVirtualList) return;\n\n    let isNonSelectableItem = true;\n\n    while (isNonSelectableItem) {\n      if (increment > 0 && hoverItemIndex === (items.length - 1)) {\n        hoverItemIndex = 0;\n      }\n      else if (increment < 0 && hoverItemIndex === 0) {\n        hoverItemIndex = items.length - 1;\n      }\n      else {\n        hoverItemIndex = hoverItemIndex + increment;\n      }\n\n      isNonSelectableItem = items[hoverItemIndex].isGroupHeader && !items[hoverItemIndex].isSelectable;\n    }\n\n    await tick();\n\n    scrollToActiveItem('hover');\n  }\n\n  function handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        items.length && updateHoverItem(1);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        items.length && updateHoverItem(-1);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (items.length === 0) break;\n        const hoverItem = items[hoverItemIndex];\n        if (selectedValue && !isMulti && selectedValue[optionIdentifier] === hoverItem[optionIdentifier]) {\n          closeList();\n          break;\n        }\n\n        if (hoverItem.isCreator) {\n          dispatch('itemCreated', filterText);\n        } else {\n          activeItemIndex = hoverItemIndex;\n          handleSelect(items[hoverItemIndex]);\n        }\n        break;\n      case 'Tab':\n        e.preventDefault();\n        if (items.length === 0) break;\n        if (selectedValue && selectedValue[optionIdentifier] === items[hoverItemIndex][optionIdentifier]) return closeList();\n        activeItemIndex = hoverItemIndex;\n        handleSelect(items[hoverItemIndex]);\n        break;\n    }\n  }\n\n  function scrollToActiveItem(className) {\n    if (isVirtualList || !container) return;\n\n    let offsetBounding;\n    const focusedElemBounding = container.querySelector(`.listItem .${className}`);\n\n    if (focusedElemBounding) {\n      offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;\n    }\n\n    container.scrollTop -= offsetBounding;\n  }\n\n  function isItemActive(item, selectedValue, optionIdentifier) {\n    return selectedValue && (selectedValue[optionIdentifier] === item[optionIdentifier]);\n  };\n\n  function isItemFirst(itemIndex) {\n    return itemIndex === 0;\n  };\n\n  function isItemHover(hoverItemIndex, item, itemIndex, items) {\n    return hoverItemIndex === itemIndex || items.length === 1;\n  }\n\n</script>\n\n<svelte:window on:keydown=\"{handleKeyDown}\" />\n\n{#if isVirtualList}\n<div class=\"listContainer virtualList\" bind:this={container}>\n\n  <VirtualList {items} {itemHeight} let:item let:i>\n  \n    <div on:mouseover=\"{() => handleHover(i)}\" on:click=\"{event => handleClick({item, i, event})}\"\n        class=\"listItem\">\n          <svelte:component \n            this=\"{Item}\"\n            {item}\n            {filterText}\n            {getOptionLabel}\n            isFirst=\"{isItemFirst(i)}\"\n            isActive=\"{isItemActive(item, selectedValue, optionIdentifier)}\"\n            isHover=\"{isItemHover(hoverItemIndex, item, i, items)}\"\n          />\n    </div>\n  \n</VirtualList>\n</div>\n{/if}\n\n{#if !isVirtualList}\n<div class=\"listContainer\" bind:this={container}>\n  {#each items as item, i}\n    {#if item.isGroupHeader && !item.isSelectable}\n      <div class=\"listGroupTitle\">{getGroupHeaderLabel(item)}</div>\n    { :else }\n    <div \n      on:mouseover=\"{() => handleHover(i)}\" \n      on:click=\"{event => handleClick({item, i, event})}\"\n      class=\"listItem\"\n    >\n      <svelte:component \n        this=\"{Item}\"\n        {item}\n        {filterText}\n        {getOptionLabel}\n        isFirst=\"{isItemFirst(i)}\"\n        isActive=\"{isItemActive(item, selectedValue, optionIdentifier)}\"\n        isHover=\"{isItemHover(hoverItemIndex, item, i, items)}\"\n      />\n    </div>\n    {/if}\n  {:else}\n    {#if !hideEmptyState}\n      <div class=\"empty\">{noOptionsMessage}</div>\n    {/if}\n  {/each}\n</div>\n{/if}\n\n<style>\n  .listContainer {\n    box-shadow: var(--listShadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));\n    border-radius: var(--listBorderRadius, 4px);\n    max-height: var(--listMaxHeight, 250px);\n    overflow-y: auto;\n    background: var(--listBackground, #fff);\n  }\n\n  .virtualList {\n    height: var(--virtualListHeight, 200px);\n  }\n\n  .listGroupTitle {\n    color: var(--groupTitleColor, #8f8f8f);\n    cursor: default;\n    font-size: var(--groupTitleFontSize, 12px);\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--groupTitlePadding, 0 20px);\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    white-space: nowrap;\n    text-transform: var(--groupTitleTextTransform, uppercase);\n  }\n\n  .empty {\n    text-align: var(--listEmptyTextAlign, center);\n    padding: var(--listEmptyPadding, 20px 0);\n    color: var(--listEmptyColor, #78848F);\n  }\n</style>\n",
    "<script>\n  export let isActive = false;\n  export let isFirst = false;\n  export let isHover = false;\n  export let getOptionLabel = undefined;\n  export let item = undefined;\n  export let filterText = '';\n\n  let itemClasses = '';\n\n  $: {\n    const classes = [];\n    if (isActive) { classes.push('active'); }\n    if (isFirst) { classes.push('first'); }\n    if (isHover) { classes.push('hover'); }\n    if (item.isGroupHeader) { classes.push('groupHeader'); }\n    if (item.isGroupItem) { classes.push('groupItem'); }\n    itemClasses = classes.join(' ');\n  }\n</script>\n\n<style>\n  .item {\n    cursor: default;\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--itemPadding, 0 20px);\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  .groupHeader {\n    text-transform: var(--groupTitleTextTransform, uppercase);\n  }\n\n  .groupItem {\n    padding-left: 40px;\n  }\n\n  .item:active {\n    background: var(--itemActiveBackground, #b9daff);\n  }\n\n  .item.active {\n    background: var(--itemIsActiveBG, #007aff);\n    color: var(--itemIsActiveColor, #fff);\n  }\n\n  .item.first {\n    border-radius: var(--itemFirstBorderRadius, 4px 4px 0 0);\n  }\n\n  .item.hover:not(.active) {\n    background: var(--itemHoverBG, #e7f2ff);\n  }\n</style>\n\n\n\n<div class=\"item {itemClasses}\">\n  {@html getOptionLabel(item, filterText)}\n</div>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let selectedValue = [];\n  export let activeSelectedValue = undefined;\n  export let isDisabled = false;\n  export let getSelectionLabel = undefined;\n\n  function handleClear(i, event) {\n    event.stopPropagation();\n    dispatch('multiItemClear', {i});\n  }\n</script>\n\n{#each selectedValue as value, i}\n<div class=\"multiSelectItem {activeSelectedValue === i ? 'active' : ''} {isDisabled ? 'disabled' : ''}\">\n  <div class=\"multiSelectItem_label\">\n    {@html getSelectionLabel(value)}\n  </div>\n  {#if !isDisabled}\n  <div class=\"multiSelectItem_clear\" on:click=\"{event => handleClear(i, event)}\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"-2 -2 50 50\" focusable=\"false\" role=\"presentation\">\n      <path\n        d=\"M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z\"></path>\n    </svg>\n  </div>\n  {/if}\n</div>\n{/each}\n\n\n\n<style>\n  .multiSelectItem {\n    background: var(--multiItemBG, #EBEDEF);\n    margin: var(--multiItemMargin, 5px 5px 0 0);\n    border-radius: var(--multiItemBorderRadius, 16px);\n    height: var(--multiItemHeight, 32px);\n    line-height: var(--multiItemHeight, 32px);\n    display: flex;\n    cursor: default;\n    padding: var(--multiItemPadding, 0 10px 0 15px);\n  }\n\n  .multiSelectItem_label {\n    margin: var(--multiLabelMargin, 0 5px 0 0);\n  }\n\n  .multiSelectItem:hover,\n  .multiSelectItem.active {\n    background-color: var(--multiItemActiveBG, #006FFF);\n    color: var(--multiItemActiveColor, #fff);\n  }\n\n  .multiSelectItem.disabled:hover {\n    background: var(--multiItemDisabledHoverBg, #EBEDEF);\n    color: var(--multiItemDisabledHoverColor, #C1C6CC);\n  }\n\n  .multiSelectItem_clear {\n    border-radius: var(--multiClearRadius, 50%);\n    background: var(--multiClearBG, #52616F);\n    width: var(--multiClearWidth, 16px);\n    height: var(--multiClearHeight, 16px);\n    position: relative;\n    top: var(--multiClearTop, 8px);\n    text-align: var(--multiClearTextAlign, center);\n    padding: var(--multiClearPadding, 1px);\n  }\n\n  .multiSelectItem_clear:hover,\n  .active .multiSelectItem_clear {\n    background: var(--multiClearHoverBG, #fff);\n  }\n\n  .multiSelectItem_clear:hover svg,\n  .active .multiSelectItem_clear svg {\n    fill: var(--multiClearHoverFill, #006FFF);\n  }\n\n  .multiSelectItem_clear svg {\n    fill: var(--multiClearFill, #EBEDEF);\n    vertical-align: top;\n  }\n</style>\n",
    "<script>\n  export let getSelectionLabel = undefined;\n  export let item = undefined;\n</script>\n\n<style>\n  .selection {\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    white-space: nowrap;\n  }\n</style>\n\n<div class=\"selection\">\n  {@html getSelectionLabel(item)} \n</div>\n",
    "<script>\n\timport { onMount, tick } from 'svelte';\n\n\t// props\n\texport let items = undefined;\n\texport let height = '100%';\n\texport let itemHeight = 40;\n\texport let hoverItemIndex = 0;\n\n\t// read-only, but visible to consumers via bind:start\n\texport let start = 0;\n\texport let end = 0;\n\n\t// local state\n\tlet height_map = [];\n\tlet rows;\n\tlet viewport;\n\tlet contents;\n\tlet viewport_height = 0;\n\tlet visible;\n\tlet mounted;\n\n\tlet top = 0;\n\tlet bottom = 0;\n\tlet average_height;\n\n\t$: visible = items.slice(start, end).map((data, i) => {\n\t\treturn { index: i + start, data };\n\t});\n\n\t// whenever `items` changes, invalidate the current heightmap\n\t$: if (mounted) refresh(items, viewport_height, itemHeight);\n\n\tasync function refresh(items, viewport_height, itemHeight) {\n\t\tconst { scrollTop } = viewport;\n\n\t\tawait tick(); // wait until the DOM is up to date\n\n\t\tlet content_height = top - scrollTop;\n\t\tlet i = start;\n\n\t\twhile (content_height < viewport_height && i < items.length) {\n\t\t\tlet row = rows[i - start];\n\n\t\t\tif (!row) {\n\t\t\t\tend = i + 1;\n\t\t\t\tawait tick(); // render the newly visible row\n\t\t\t\trow = rows[i - start];\n\t\t\t}\n\n\t\t\tconst row_height = height_map[i] = itemHeight || row.offsetHeight;\n\t\t\tcontent_height += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = (top + content_height) / end;\n\n\t\tbottom = remaining * average_height;\n\t\theight_map.length = items.length;\n\n\t\tviewport.scrollTop = 0;\n\t}\n\n\tasync function handle_scroll() {\n\t\tconst { scrollTop } = viewport;\n\n\t\tconst old_start = start;\n\n\t\tfor (let v = 0; v < rows.length; v += 1) {\n\t\t\theight_map[start + v] = itemHeight || rows[v].offsetHeight;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet y = 0;\n\n\t\twhile (i < items.length) {\n\t\t\tconst row_height = height_map[i] || average_height;\n\t\t\tif (y + row_height > scrollTop) {\n\t\t\t\tstart = i;\n\t\t\t\ttop = y;\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ty += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\twhile (i < items.length) {\n\t\t\ty += height_map[i] || average_height;\n\t\t\ti += 1;\n\n\t\t\tif (y > scrollTop + viewport_height) break;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = y / end;\n\n\t\twhile (i < items.length) height_map[i++] = average_height;\n\t\tbottom = remaining * average_height;\n\n\t\t// prevent jumping if we scrolled up into unknown territory\n\t\tif (start < old_start) {\n\t\t\tawait tick();\n\n\t\t\tlet expected_height = 0;\n\t\t\tlet actual_height = 0;\n\n\t\t\tfor (let i = start; i < old_start; i += 1) {\n\t\t\t\tif (rows[i - start]) {\n\t\t\t\t\texpected_height += height_map[i];\n\t\t\t\t\tactual_height += itemHeight || rows[i - start].offsetHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst d = actual_height - expected_height;\n\t\t\tviewport.scrollTo(0, scrollTop + d);\n\t\t}\n\n\t\t// TODO if we overestimated the space these\n\t\t// rows would occupy we may need to add some\n\t\t// more. maybe we can just call handle_scroll again?\n\t}\n\n\t// trigger initial refresh\n\tonMount(() => {\n\t\trows = contents.getElementsByTagName('svelte-virtual-list-row');\n\t\tmounted = true;\n\t});\n</script>\n\n<style>\n\tsvelte-virtual-list-viewport {\n\t\tposition: relative;\n\t\toverflow-y: auto;\n\t\t-webkit-overflow-scrolling: touch;\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-contents,\n\tsvelte-virtual-list-row {\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-row {\n\t\toverflow: hidden;\n\t}\n</style>\n\n<svelte-virtual-list-viewport bind:this={viewport} bind:offsetHeight={viewport_height} on:scroll={handle_scroll}\n\tstyle=\"height: {height};\">\n\t<svelte-virtual-list-contents bind:this={contents} style=\"padding-top: {top}px; padding-bottom: {bottom}px;\">\n\t\t{#each visible as row (row.index)}\n\t\t\t<svelte-virtual-list-row>\n\t\t\t\t<slot item={row.data} i={row.index} {hoverItemIndex}>Missing template</slot>\n\t\t\t</svelte-virtual-list-row>\n\t\t{/each}\n\t</svelte-virtual-list-contents>\n</svelte-virtual-list-viewport>"
  ],
  "names": [],
  "mappings": "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"
}