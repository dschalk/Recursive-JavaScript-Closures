
<script>
import {fade} from "svelte/transition"
import {j} from "./Blog.svelte";
let visible = true;

let monadDisplay = `function Monad (z) {
    var x = z;
    var foo = function foo (func) {
        var stop = 'stop';
        if (func.name === 'stop') return x
        else {
            x = func(x);
            return foo;
        }
    };
    return foo;
}

const prod = a => b => a*b;
const sum = a => b => a+b;`

let axe = `
let mon = Monad(3);
let a = mon(x=>x**3)(x=>x+3)(x=>x**2)(stop);
console.log("a is", a)  // a is 900`
let fred = `
let ar = [];
let mon = Monad(3);
let mon2 = Monad();
ar.push(mon(stop));
var a = mon(x=>x**3)(x=>x+3)(x=>x**2)
ar.push(a);
ar.push(mon(x => x/100);
ar.push(mon2(mon(stop)(x=>x*100)))
console.log("ar.map(v=>v('stop')) is", ar.map(v=>v('stop')))  // [3, 900, 9] `

function Monad (z) {
  var x = z;
  var stop = "stop";
  var foo = function foo (func) {
    if (func.name === "stop") return x
    else {
      x = func(x);
      return foo;
    }
  };
  return foo;
}

const prod = a => b => a*b;
const sum = a => b => a+b;

let num = 6;

let bonads = function bonads(num) {
return [Monad(num)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-3)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),
Monad(num-0)(sum(7))(prod(4))(v=>v-10)(stop)]}


let mona = bonads(num);
$: mona
console.log(mona)

function numF (e) {num = e.target.value; console.log("e.target.value is", e.target.value); return e.target.value}
$: num

console.log("num is", num);
</script>

<style>
.tao {
  margin-left: 3%;
}

h3 {
   font-size: 27px;
}

#aside {
    font-size: 18px;
    color: #eeaaff;
    font-style: italic;
  }

</style>
<br><br><br>
 {#if j === 5}
 	<div style = "font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;" transition:fade>
A SIMPLE LITTLE MONAD
 	</div>
 {/if}
 <br>
<span class="tao"> The word "monad" has been around for centuries. Gottfried Leibniz published </span>
<span style = "font-style: italic"> Monadology </span>
<span> in 1714. The precursor to the familiar symbol of yin-yang, taijitu (太極圖), has a version with two dots added, has been given the august designation: "The Great Monad". A single note in music theory is called a monad. All of this is too tangential to warrant references. I Googled around a little to get it and you can too if the word "monad" interests you.</span>
<p> Monads in the Haskell Programming Language were inspired by Category Theory monads. In order to be Category Theory monads, function must exist in a mathematically rigorous "category". Haskells objects and functions are not the objects and morphisms of Category Theory. Making a category out of most of Haskell's functions and types is an amusing pasttime for some people, but I doubt that it has any practical value. </p>
<p> So it should be no surprise that my JavaScript monads are not Category Theory monads. They do obey a JavaScript version of the Haskell monad laws, which are not a requirement in Haskell but are indicative of utility and robustness objects (including functions) don't constitute a category. But functions that hold values and compose with multiple functions that operate on their values behave like Category Theory monads enough to justify calling them "monads".</p>
<p> Here's the definitions of three functions: </p>
<pre>{monadDisplay}</pre>
<p> And here is an anonymous monad followed by three functions and "stop". : </p>
<pre> Monad(6)(sum(7))(prod(4))(v=>v-10)(stop) // 42 </pre>
<p> Anonymous monads never interfere with other monads. The demonstration below illustrates this by running seven anonymous monads in rapid succession. The number you enter is "num" in </p>
<input id = "one" type = "number" on:input={bonads}  bind:value={num} />
<p> num is {num} so bonads(num) returns {bonads(num)} </p>

<span class = tao> Named monads retain their values, even after they encounter "stop" and return the value of x held in the Monad closure. The following examples illustrate this: </span>
<pre>
{axe}
</pre>

<p> As expected, mon returns which is the "foo()" returned by by calling Monad(3):</p>

<p> mon is still the foo() returned by Monad(). Because mon points to x in the context of its creation by Monad(), x will not be garbage collected. Care should be taken not to polute memory with useless x's.</p>

<p> One reason Svelte is so fast and efficient is that it mutates variables and the attributes and methods of objects. Each module in a discrete global space.  When modules are small, applications are easy to organize and mutations don't have unforseen effects in other parts of applications. Svelte shook off the bonds of current conventional "wisdom" advocating immutability, virtual DOM, and assigning types to functions. </p>
<p> The next entry in the monad series defines a variation of Monad that maintains and array of primitive data, function return values, and Promise resolution values. Functions have access to everything in the array when they execute. </p>
